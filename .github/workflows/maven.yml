# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [service-utilisateur, service-notes, service-compte, service-gestion-password]  # Liste des microservices à analyser

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Test SonarQube connectivity
        run: |
          curl -v ${{ secrets.SONAR_HOST_URL }}

      - name: Code coverage & scan SonarQube & packaging JAR
        run: >
          mvn -f ${{ matrix.service }}/pom.xml
          org.jacoco:jacoco-maven-plugin:prepare-agent
          package
          verify
          org.jacoco:jacoco-maven-plugin:report
          sonar:sonar
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
          -Dsonar.projectKey=Projet-java-${{ matrix.service }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Qualité SonarQube
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        with:
          scanMetadataReportFile: ${{ matrix.service }}/target/sonar/report-task.txt
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Partage du fichier JAR
        uses: actions/upload-artifact@v3
        with:
          name: appjar-${{ matrix.service }}
          path: ${{ matrix.service }}/target/*.jar